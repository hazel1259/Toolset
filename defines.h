// Constants we use in this application
//
#ifndef GET_X_LPARAM
#define GET_X_LPARAM(lParam)	((int)(short)LOWORD(lParam))
#endif
#ifndef GET_Y_LPARAM
#define GET_Y_LPARAM(lParam)	((int)(short)HIWORD(lParam))
#endif
#define NOTIMPL MessageBox(NULL, "This feature still under construction", "Information", MB_OK | MB_ICONINFORMATION)
#define __ERROR WSAGetLastError()
#define SOCKSUCCESS(__rc__) (SOCKET_ERROR != __rc__)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAX_SIZE 0x8000
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Buffer testing macros and cosntants, this is useful in data parsing code
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define END_BUFF(__P1__, __P2__, __D__) ((DWORD)(__P1__ - __P2__) - __D__ <= 0)
#define SkipSpaces(__P__) while(*__P__ == ' ') __P__ ++;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Redefine null if it is not already defined
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef     null
#undef      null
#define     null NULL
#endif
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// this defines the border size of the window
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define dxRESize -GetSystemMetrics(SM_CXBORDER)
#define dyRESize -GetSystemMetrics(SM_CYBORDER)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// define the different menu states so we know how to redraw the fake menu
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MENU_HILITED      0x01
#define MENU_KEYACTIVE    0x02
#define MENU_SELECTED     0x03
#define MENU_TRANSITION   0x8000000
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// macros that can be uised to delete objects - move to macros.h
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define delete_o(__o__) if (__o__) delete __o__; __o__ = NULL;
#define gdi_del(__o__) if (NULL != __o__) DeleteObject(__o__); __o__ = NULL; //regardless of whether it is or isn't

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// macros that can be uised to create static references to datatypes
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define __clear(__P__) memset(__P__, 0, sizeof(__P__))
#define __declareval(__T__,__N__, __S__) __T__ __N__[__S__]; __clear(__N__)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// macros that we use to allocatd memory (CMem leverages these)
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//#define MyAlloc(_t_, _s_) (_t_)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, _s_)
//#define MyFree(_p_) if (_p_) {HeapFree(GetProcessHeap(), 0, _p_); _p_ = NULL;}
//#define MyRealloc(_t_, _p_, _s_) (_t_)HeapReAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, _p_, _s_) 
#define MyHeapSize(__P__) HeapSize(GetProcessHeap(), 0, __P__)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Buffer sizing and initilizing routines
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// declare the buffer size macro for ref initializatoin
#ifdef BUFF_SIZE
#undef BUFF_SIZE
#endif
// define it
#define BUFF_SIZE(__T__) sizeof(__T__)/sizeof(__T__[0]) 
// this clears a static fixed size non-pointer buffer
#define CLEARBUFF(__B__) ZeroMemory(__B__, BUFF_SIZE(__B__))

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This simplifies some of the work we have to do when we work with a windows procedure
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// window procedure
//
#define DECLARE_WNDPROC(__N__) LRESULT CALLBACK __N__ (HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
// Dialog procedure
//
#define DECLARE_DLGPROC(__N__) BOOL CALLBACK __N__ (HWND hDlg, UINT msg, WPARAM wParam, LPARAM lParam)
// default window procedure
#define DEFPROC return DefWindowProc(hWnd, msg, wParam, lParam)
// callproc
#define CALLPROC

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// These constants are used in obtaining the graphical display metrics
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define Horizontal    HORZRES
#define Veritcal      VERTRES
#define PixelWidth    LOGPIXELSX
#define PixelHeight   LOGPIXELSX
#define OffsetX       PHYSICALOFFSETX
#define OffsetY       PHYSICALOFFSETY

//
// Type of TYPEDEFS we can have
//
// Logging constants
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Memory signature
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define MEM_SIGNATURE 0xDEAD0ACE
// this is for compiler semantics
//

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// mask for the bits used member which must be masked off from the byte then shifted
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define BITS_MASK (unsigned char)0xF8
#if !defined( __in_out)
#define __in_out
#else
#endif

